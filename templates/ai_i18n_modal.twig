{# AI测试数据生成多语言模态框 #}

{# 内联PHP来获取翻译 #}
{% set lang = app.request.locale|default('en') %}

{# 设置翻译变量 #}
{% set translations = {
  'en': {
    'generate_ai_test_data': 'Generate AI test data',
    'data_description_colon': 'Data description:',
    'record_count_colon': 'Record count:',
    'cancel': 'Cancel',
    'generate_data': 'Generate data',
    'generating': 'Generating...',
    'please_enter_description': 'Please enter data description',
    'unable_get_db_info': 'Unable to get database or table information',
    'generation_successful': 'AI test data generation successful! Generated',
    'records': 'records',
    'generation_failed_colon': 'Generation failed:',
    'unknown_error': 'Unknown error',
    'request_failed_network': 'Request failed, please check network connection',
    'placeholder_description': 'Please describe the test data you want to generate, e.g., user information including name, email, registration time, etc.'
  },
  'zh_CN': {
    'generate_ai_test_data': '生成AI测试数据',
    'data_description_colon': '数据描述：',
    'record_count_colon': '记录数量：',
    'cancel': '取消',
    'generate_data': '生成数据',
    'generating': '生成中...',
    'please_enter_description': '请输入数据描述',
    'unable_get_db_info': '无法获取数据库或表信息',
    'generation_successful': 'AI测试数据生成成功！已生成',
    'records': '条记录',
    'generation_failed_colon': '生成失败：',
    'unknown_error': '未知错误',
    'request_failed_network': '请求失败，请检查网络连接',
    'placeholder_description': '请描述您想要生成的测试数据，例如：用户信息，包含姓名、邮箱、注册时间等'
  },
  'zh_TW': {
    'generate_ai_test_data': '產生AI測試資料',
    'data_description_colon': '資料描述：',
    'record_count_colon': '記錄數量：',
    'cancel': '取消',
    'generate_data': '產生資料',
    'generating': '產生中...',
    'please_enter_description': '請輸入資料描述',
    'unable_get_db_info': '無法取得資料庫或表格資訊',
    'generation_successful': 'AI測試資料產生成功！已產生',
    'records': '筆記錄',
    'generation_failed_colon': '產生失敗：',
    'unknown_error': '未知錯誤',
    'request_failed_network': '請求失敗，請檢查網路連線',
    'placeholder_description': '請描述您想要產生的測試資料，例如：使用者資訊，包含姓名、電子郵件、註冊時間等'
  },
  'ja': {
    'generate_ai_test_data': 'AIテストデータを生成',
    'data_description_colon': 'データ説明：',
    'record_count_colon': 'レコード数：',
    'cancel': 'キャンセル',
    'generate_data': 'データを生成',
    'generating': '生成中...',
    'please_enter_description': 'データ説明を入力してください',
    'unable_get_db_info': 'データベースまたはテーブル情報を取得できません',
    'generation_successful': 'AIテストデータの生成が成功しました！生成済み',
    'records': '件のレコード',
    'generation_failed_colon': '生成に失敗しました：',
    'unknown_error': '不明なエラー',
    'request_failed_network': 'リクエストが失敗しました。ネットワーク接続を確認してください',
    'placeholder_description': '生成したいテストデータを説明してください。例：名前、メール、登録時間などを含むユーザー情報'
  }
} %}

{# 获取当前语言的翻译，如果不存在则使用英文 #}
{% set current_translations = translations[lang] ?? translations['en'] %}

<script>
// AI功能多语言支持
window.aiTranslations = {
  'generate_ai_test_data': '{{ current_translations.generate_ai_test_data|escape('js') }}',
  'data_description_colon': '{{ current_translations.data_description_colon|escape('js') }}',
  'record_count_colon': '{{ current_translations.record_count_colon|escape('js') }}',
  'cancel': '{{ current_translations.cancel|escape('js') }}',
  'generate_data': '{{ current_translations.generate_data|escape('js') }}',
  'generating': '{{ current_translations.generating|escape('js') }}',
  'please_enter_description': '{{ current_translations.please_enter_description|escape('js') }}',
  'unable_get_db_info': '{{ current_translations.unable_get_db_info|escape('js') }}',
  'generation_successful': '{{ current_translations.generation_successful|escape('js') }}',
  'records': '{{ current_translations.records|escape('js') }}',
  'generation_failed_colon': '{{ current_translations.generation_failed_colon|escape('js') }}',
  'unknown_error': '{{ current_translations.unknown_error|escape('js') }}',
  'request_failed_network': '{{ current_translations.request_failed_network|escape('js') }}',
  'placeholder_description': '{{ current_translations.placeholder_description|escape('js') }}'
};

// 辅助函数
function aiTrans(key) {
  return window.aiTranslations[key] || key;
}
</script>

<!-- AI测试数据生成模态框 (多语言) -->
<div class="modal fade" id="aiTestDataModal" tabindex="-1" aria-labelledby="aiTestDataModalLabel">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="aiTestDataModalLabel">
          {{ get_icon('b_tblops') }} {{ current_translations.generate_ai_test_data }}
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="aiTestDataForm">
          <div class="mb-3">
            <label for="dataDescription" class="form-label">{{ current_translations.data_description_colon }}</label>
            <textarea class="form-control" id="dataDescription" name="data_description" rows="3" 
              placeholder="{{ current_translations.placeholder_description }}"></textarea>
          </div>
          <div class="mb-3">
            <label for="recordCount" class="form-label">{{ current_translations.record_count_colon }}</label>
            <input type="number" class="form-control" id="recordCount" name="record_count" 
              min="1" max="100" value="5">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{ current_translations.cancel }}</button>
        <button type="button" class="btn btn-primary" id="generateDataBtn">{{ current_translations.generate_data }}</button>
      </div>
    </div>
  </div>
</div>

<script>
// 多语言AI数据生成JavaScript
function initializeAIDataGeneration() {
  console.log('Initializing AI Data Generation...');
  
  const aiTestDataBtn = document.getElementById('aiTestDataBtn');
  const aiTestDataModalElement = document.getElementById('aiTestDataModal');
  const generateDataBtn = document.getElementById('generateDataBtn');
  
  console.log('Elements found:', {
    aiTestDataBtn: !!aiTestDataBtn,
    aiTestDataModalElement: !!aiTestDataModalElement,
    generateDataBtn: !!generateDataBtn
  });
  
  if (!aiTestDataModalElement) {
    console.error('AI Test Data Modal element not found');
    return;
  }
  
  const aiTestDataModal = new bootstrap.Modal(aiTestDataModalElement);
  
  // 修复可访问性问题：正确管理 aria-hidden 属性
  aiTestDataModalElement.addEventListener('show.bs.modal', function() {
    // 模态框显示时移除 aria-hidden
    this.removeAttribute('aria-hidden');
  });
  
  aiTestDataModalElement.addEventListener('hidden.bs.modal', function() {
    // 模态框隐藏时添加 aria-hidden
    this.setAttribute('aria-hidden', 'true');
  });
  
  // 初始状态设置 aria-hidden
  aiTestDataModalElement.setAttribute('aria-hidden', 'true');
  
  // 绑定按钮点击事件
  if (aiTestDataBtn) {
    // 移除可能存在的旧事件监听器
    aiTestDataBtn.removeEventListener('click', handleAIButtonClick);
    // 添加新的事件监听器
    aiTestDataBtn.addEventListener('click', handleAIButtonClick);
    console.log('AI Test Data button event listener attached');
  } else {
    console.error('AI Test Data button not found');
  }
  
  function handleAIButtonClick() {
    console.log('AI Test Data button clicked');
    aiTestDataModal.show();
  }
  
  if (generateDataBtn) {
    // 移除可能存在的旧事件监听器
    generateDataBtn.removeEventListener('click', handleGenerateDataClick);
    // 添加新的事件监听器
    generateDataBtn.addEventListener('click', handleGenerateDataClick);
    console.log('Generate Data button event listener attached');
  } else {
    console.error('Generate Data button not found');
  }
  
  function handleGenerateDataClick() {
    console.log('Generate Data button clicked');
    
    const description = document.getElementById('dataDescription').value.trim();
    const recordCount = document.getElementById('recordCount').value;
    
    if (!description) {
      alert(aiTrans('please_enter_description'));
      return;
    }
    
    // 获取当前数据库和表名
    const urlParams = new URLSearchParams(window.location.search);
    let db = urlParams.get('db');
    let table = urlParams.get('table');
    
    // 如果URL参数中没有，从隐藏输入中获取
    if (!db) {
      const dbInput = document.querySelector('input[name="db"]');
      db = dbInput ? dbInput.value : '';
    }
    if (!table) {
      const tableInput = document.querySelector('input[name="table"]');
      table = tableInput ? tableInput.value : '';
    }
    
    console.log('Database and table info:', { db, table });
    
    if (!db || !table) {
      alert(aiTrans('unable_get_db_info'));
      return;
    }
    
    // 禁用按钮并显示加载状态
    generateDataBtn.disabled = true;
    generateDataBtn.textContent = aiTrans('generating');
    
    // 发送AJAX请求
    const formData = new FormData();
    formData.append('data_description', description);
    formData.append('record_count', recordCount);
    formData.append('db', db);
    formData.append('table', table);
    
    console.log('Sending AJAX request...');
    
    fetch('./ajax_ai_generate.php', {
      method: 'POST',
      body: formData
    })
    .then(response => {
      console.log('Response received:', response.status);
      return response.json();
    })
    .then(data => {
      console.log('Response data:', data);
      if (data.success) {
        alert(aiTrans('generation_successful') + ' ' + data.record_count + ' ' + aiTrans('records'));
        // 关闭模态框
        aiTestDataModal.hide();
        // 刷新页面以显示新数据
        window.location.reload();
      } else {
        alert(aiTrans('generation_failed_colon') + ' ' + (data.message || aiTrans('unknown_error')));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      // 网络请求错误已处理，不显示错误提示
    })
    .finally(() => {
      // 恢复按钮状态
      generateDataBtn.disabled = false;
      generateDataBtn.textContent = aiTrans('generate_data');
    });
  }
}

// 在DOM加载完成时初始化
document.addEventListener('DOMContentLoaded', initializeAIDataGeneration);

// 如果DOM已经加载完成，立即初始化
if (document.readyState === 'loading') {
  // DOM还在加载中，等待DOMContentLoaded事件
  document.addEventListener('DOMContentLoaded', initializeAIDataGeneration);
} else {
  // DOM已经加载完成，立即执行
  initializeAIDataGeneration();
}

// 为了确保在页面刷新后也能正常工作，添加window.onload事件
window.addEventListener('load', function() {
  console.log('Window loaded, re-initializing AI Data Generation...');
  // 延迟一点时间确保所有元素都已渲染
  setTimeout(initializeAIDataGeneration, 100);
});
</script> 